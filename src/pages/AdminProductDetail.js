import React, { useEffect, useState } from 'react';import { doc, getDoc, updateDoc } from 'firebase/firestore';import { ref, uploadBytes, getDownloadURL, deleteObject } from 'firebase/storage';import { db, storage } from '../firebase/config';import { useNavigate, useParams } from 'react-router-dom';const AdminProductDetail = ({ product: passedProduct }) => {  const { id } = useParams(); // fetch product ID from URL  const navigate = useNavigate();  const [product, setProduct] = useState(passedProduct || null);  const [editedProduct, setEditedProduct] = useState({    name: '',    price: '',    stock: '',    description: '',    images: []  });  const [newImages, setNewImages] = useState([]);  // Fetch product if not passed as prop  useEffect(() => {    const fetchProduct = async () => {      const docRef = doc(db, 'products', id);      const docSnap = await getDoc(docRef);      if (docSnap.exists()) {        const data = docSnap.data();        setProduct({ id: docSnap.id, ...data });      }    };    if (!passedProduct) fetchProduct();  }, [id, passedProduct]);  // Sync product data into editable fields  useEffect(() => {    if (product) {      setEditedProduct({        name: product.name || '',        price: product.price || '',        stock: product.stock || '',        description: product.description || '',        images: product.images || (product.image ? [product.image] : [])      });    }  }, [product]);  const handleInputChange = (e) => {    const { name, value } = e.target;    setEditedProduct(prev => ({      ...prev,      [name]: value    }));  };  const handleImageUpload = (e) => {    setNewImages([...e.target.files]);  };  const handleSave = async () => {    try {      let updatedImages = [...editedProduct.images];      for (let file of newImages) {        const imageRef = ref(storage, `products/${Date.now()}_${file.name}`);        await uploadBytes(imageRef, file);        const imageUrl = await getDownloadURL(imageRef);        updatedImages.push(imageUrl);      }      const updatedData = {        ...editedProduct,        price: parseFloat(editedProduct.price),        stock: parseInt(editedProduct.stock),        images: updatedImages      };      const productRef = doc(db, 'products', product.id);      await updateDoc(productRef, updatedData);      alert('Product updated successfully.');      navigate('/admin');    } catch (error) {      console.error('Failed to update product:', error);      alert('Error updating product.');    }  };    const deleteExtraImage = async (imgUrlToDelete) => {    if (!editedProduct.images) return;      try {      // 1. Remove from Firebase Storage      // Extract the path after `/o/` and before any query params      const pathMatch = decodeURIComponent(imgUrlToDelete).match(/\/o\/(.+?)\?/);      if (!pathMatch || !pathMatch[1]) throw new Error("Invalid image URL");        const imagePath = pathMatch[1];      const imageRef = ref(storage, imagePath);      await deleteObject(imageRef);        // 2. Remove URL from Firestore `images` array      const updatedImages = editedProduct.images.filter(img => img !== imgUrlToDelete);      const productRef = doc(db, "products", id);      await updateDoc(productRef, { images: updatedImages });        // 3. Update local state      setEditedProduct(prev => ({        ...prev,        images: updatedImages,      }));      } catch (error) {      console.error("Failed to delete image completely:", error);      alert("Failed to delete image from storage or database.");    }  };  if (!product) return <p className="text-white">Loading...</p>;  return (    <div style={{ padding: '2rem', color: 'white' }}>      <h2>Edit Product</h2>      <button        onClick={() => navigate('/admin')}        style={{ marginBottom: '1rem', background: '#444', color: 'white', padding: '0.5rem 1rem', borderRadius: '4px' }}      >        Back to Dashboard      </button>      <div className="bg-card rounded-lg shadow-lg px-6 py-4 border border-customgray mb-6">        <label>Name</label>        <input          name="name"          type="text"          value={editedProduct.name}          onChange={handleInputChange}          className="p-2 rounded w-full text-black mb-3"        />        <label>Price</label>        <input          name="price"          type="number"          value={editedProduct.price}          onChange={handleInputChange}          className="p-2 rounded w-full text-black mb-3"        />        <label>Stock</label>        <input          name="stock"          type="number"          value={editedProduct.stock}          onChange={handleInputChange}          className="p-2 rounded w-full text-black mb-3"        />        <label>Description</label>        <textarea          name="description"          value={editedProduct.description}          onChange={handleInputChange}          className="p-2 rounded w-full text-black mb-3"        />        <label>Upload Additional Images</label>        <input          type="file"          multiple          onChange={handleImageUpload}          className="mb-3"        />        <div className="flex flex-wrap gap-2 mb-4">                {editedProduct.images.map((imgUrl, index) => (                  <div                    key={index}                    style={{                      position: 'relative',                      width: '100px',                      height: '100px'                    }}                  >                    <img                      src={imgUrl}                      alt={`Product-${index}`}                      style={{                        width: '100px',                        height: '100px',                        objectFit: 'cover',                        borderRadius: '8px'                      }}                    />                    <button                      onClick={() => deleteExtraImage(imgUrl)}                      style={{                        position: 'absolute',                        top: 0,                        right: 0,                        background: 'red',                        color: 'white',                        border: 'none',                        padding: '0.2rem 0.5rem',                        cursor: 'pointer',                        borderRadius: '0 0 0 4px'                      }}                    >                      X                    </button>                  </div>                ))}              </div>                <button          onClick={handleSave}          className="bg-green-600 hover:bg-green-700 text-white font-bold py-2 px-4 rounded"        >          Save Changes        </button>      </div>    </div>  );};export default AdminProductDetail;